#!/bin/bash
#
# Copyright (C) 2020, Mike Moss <msm255243@gmail.com>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Returns
RET_0=
RET_1=
RET_2=

# Needs user (not root).
if [ $UID -eq 0 ]; then
    echo "Do not run as root..."; exit 1
fi

# Needs to be in chroot.
in_chroot() {
    if lsblk | grep cros >& /dev/null; then
        if [ -f /etc/cros_chroot_version ]; then
            return 0
        fi
    fi
    return 1
}

# Check ENVIRONMENT for chroot
check_chroot_env() {
    if ! echo "${BOARD} ${IMAGE} ${VERITY}" > /dev/null; then
        echo "Needs ENVIRONMENT..."; exit 1
    fi
}

# Check board name.
check_board() {
    if ! check_board "${BOARD}"; then
        echo "Checking board failed..."; exit 1
    fi
}

# Check build image type.
check_build_image() {
    case ${IMAGE} in
        test) :;;
        dev) :;;
        base) :;;
        *) echo "Failed to determine build image..."; exit 1;;
    esac
}

# Check verified boot status.
check_verity() {
    if [ "$VERITY" == "off" ]; then
        __verity__="--noenable_rootfs_verification"
    fi
}

# colors
colg="\e[32m"
res="\e[0m"

# Print ENVIRONMENT.
__printenv__() {
    echo
    echo -e "${colg}*${res} BOARD:  ${BOARD}"
    echo -e "${colg}*${res} IMAGE:  ${IMAGE}"
    echo -e "${colg}*${res} VERITY: ${VERITY}"
    echo
}

# (You should be in the ~/trunk/src/scripts directory).
intrunk() {
    if [ "$(pwd)" != "~/trunk/src/scripts" ]; then
        cd ~/trunk/src/scripts
    fi
}

# Setup new board and shared user password (only needed once).
# NOTE: you are able to run ./set_shared_user_password.sh
# manually to set/change the shared user password.
__new_setup__() {
    ./setup_board --board=${BOARD} "$flag"
    ./set_shared_user_password.sh
}

# Build all packages and disk image.
__build__() {
    ./build_packages --board=${BOARD}
    ./build_image --board=${BOARD} ${__verity__} ${IMAGE}
}

__usage__() {
    echo "${PROG} - ${DESC}"
    echo
    echo "USAGE:"
    echo ""
}

# Global options
PROG=$(basename $0)
DESC=''

# Options
aopts=""
bopts=""
opts=$(getopt -o $aopts -l $bopts -n "$PROG" -- "$@")
[$? -eq 0 ] || { exit ${RET_2} ;}

# runtime
if [ $# -eq 0 ]; then
    __usage__; exit ${RET_1}
fi

eval set -- "$opts"

while :; do case "$1" in
    *) __usage__; exit ${RET_1}; break;;
esac done

exit $?
