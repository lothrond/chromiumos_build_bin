#!/bin/bash

# colors
colr="\e[31m"
colg="\e[32m"
res="\e[0m"

# needs to be in chroot.
in_chroot() {
    if lsblk | grep cros >& /dev/null; then
        if [ -f /etc/cros_chroot_version ]; then
            return 0
        fi
    fi
    echo -e "This operation is done in the ${colr}chroot${res}."
    return 1
}

# validate build dir
valid_build() { 
    local build=$(echo "${diskimage}" | cut -d '/' -f 1) 
    if [ -d "${imagedir}/${build}" ]; then
        return 0
    fi
    return 1
}

# validate build image
valid_image() {
    local build=$(echo ${diskimage} | cut -d '/' -f 1)
    local image=$(echo ${diskimage} | cut -d '/' -f 2)
    case "$image" in
        base) diskimage=${imagedir}/${build}/chromiumos_base_image.bin;;
        dev) diskimage=${imagedir}/${build}/chromiumos_image.bin;;
        test) diskimage=${imagedir}/${build}/chromiumos_test_image.bin;;
    esac
    if [ -f "${diskimage}" ]; then
        return 0
    fi
    echo -e "${colr}No proper disk image of type: ${image}${res}"
    echo -e "${colr}found in: ${imagedir}/${build}${res}\n"
    return 1
}

print_informational_header() {
    echo "${PROG} - ${DESC}"
    echo -e "\n(Run with ${colg}-h${res} or ${colg}--help${res} for more information)"
    echo -e "(Press ${colg}ctrl+c${res} to quit anytime)\n"
}

get_valid_usb_device_or_be_yelled_at() {
    local usb
    getdev() { echo -e -n "${colg}Enter usb device:${res} " ;}
    getdevfailed() { echo -e "${colr}Not a valid usb device${res}\n" ;}
    while getdev; read usb; do 
        if [ ! -b $usb ]; then
            getdevfailed
        else
            echo
            usbbdev="${usb}"
            break
        fi
    done
}

 get_valid_disk_image_or_be_yelled_at() {
    local img
    getimg() { echo -e -n "${colg}Enter disk image:${res} " ;}
    getimgfailed() { 
        echo -e "${colr}Not a valid disk image${res}" 
        echo -e "\nExample:"
        echo -e "  ${colg}latest/base${res} or ${colg}R81-12858.0.2020_01_25_1731-a1/dev${res}"
        echo -e "\n(All builds can found in ${imagedir})\n"
    }
    while getimg; read img; do
        if valid_build ${img} && valid_image ${img}; then
            echo
            diskimage="${img}"
            break
        else
            getimgfailed
        fi
    done
}

flash_usb() {
    # info
    echo -e "${colr}Flashing Chromium OS${res}\n"
    echo -e "${colg}*${res} usb: ${colg}${usbdev}${res}"
    echo -e "${colg}*${res} disk image: ${colg}${diskimage}${res}"

    # flash
    if cros flash usb://${usbdev} ${diskimage}; then
        echo -e "\n${colg}done.${res}"; exit 0
    else
        echo -e "\n${colr}Failed.${res}"; exit 1
    fi
}

interactive_prompt() {
    if print_informational_header && in_chroot; then
        if get_valid_usb_device_or_be_yelled_at; then
            if get_valid_disk_image_or_be_yelled_at; then
                return 0
            fi
        fi
    fi
    return 1
}

show_usage() {
    echo "${PROG} - ${DESC}"
    echo
    echo "USAGE: ${PROG} [-p|--prompt]"
    echo "       ${PROG} [-i|--image] IMAGE [-u|--usb] USB"
    echo
    echo "OPTIONS:"
    echo "   -p,--prompt  run interactive prompt"
    echo "   -i,--image   specify disk image type"
    echo "   -u,--usb     specify usb device"
    echo
    echo "Examples:"
    echo "   ${PROG} -p"
    echo "   ${PROG} --usb /dev/sdc --image latest/base"
    echo
    echo "Example (interactive prompt):"
    echo "   Enter a usb device: /dev/sdc"
    echo "   Enter a disk image: latest/base"
    echo
    echo "(This will run):"
    echo "  cros flash usb:///dev/sdc ~/trunk/build/images/\${BOARD}/latest/chromiumos_base_image.bin"
    echo
}

PROG=$(basename $0)
DESC="flash a Chromium OS disk image on to a usb flash drive"
PROMPT=0
#usbdev=""
#diskimage=""
imagedir=~/trunk/src/build/images/${BOARD}
uopts="pi:u:"
gopts="prompt,usb,image"
opts=$(getopt -o $uopts -l $gopts -n "$PROG" -- "$@")
[ $? -eq 0 ] || { exit 1 ;}

if [ $# -eq 0 ]; then
    show_usage; exit 1
fi

eval set -- "$opts"

while :; do case "$1" in
    -p|--prompt) PROMPT=1; break;;
    -u|--usb) usbdev="$2"; shift 2; continue;;
    -i|--image) diskimage="$2"; shift 2; continue;;
    --) shift; break;;
    *) show_usage; exit 1; break;;
esac done

if in_chroot; then
    if [ $PROMPT -eq 1 ]; then
        interactive_prompt && flash_usb
    else
        if echo "${usbdev}" >& /dev/null && [ -b "$usbdev" ]; then
            if valid_build ${diskimage} && valid_image ${diskimage}; then
                flash_usb
            fi
        else
            echo -e "${colr}No valid usb device found.${res}"
        fi
    fi
fi

exit $?
